var documenterSearchIndex = {"docs":
[{"location":"dynamics/community_matrices/#Community-Matrices","page":"Community Matrices","title":"Community Matrices","text":"","category":"section"},{"location":"dynamics/community_matrices/","page":"Community Matrices","title":"Community Matrices","text":"Functions for dealing with community matrices.","category":"page"},{"location":"dynamics/community_matrices/","page":"Community Matrices","title":"Community Matrices","text":"note: Community matrix types\nThis package currently uses a Matrix{Num} as a community matrix. In the near future this will be changed to use a custom CommunityMatrix type which will include useful metadata besides what a standard matrix does.","category":"page"},{"location":"dynamics/community_matrices/","page":"Community Matrices","title":"Community Matrices","text":"community_matrix","category":"page"},{"location":"dynamics/community_matrices/#EcologicalHypergraphs.community_matrix","page":"Community Matrices","title":"EcologicalHypergraphs.community_matrix","text":"community_matrix(hg::EcologicalHypergraph)::Matrix{Num}\n\nCreates a community matrix out of an EcologicalHypergraph. The elements of the matrix are Num allowing symbolic manipulations of the matrix using Symbolics.jl.\n\n\n\n\n\n","category":"function"},{"location":"dynamics/dynamical_hypergraphs/#Dynamical-Hypergraphs","page":"Dynamical Hypergraphs","title":"Dynamical Hypergraphs","text":"","category":"section"},{"location":"dynamics/dynamical_hypergraphs/","page":"Dynamical Hypergraphs","title":"Dynamical Hypergraphs","text":"The core of EcologicalHypergraph's dynamical tool set is the @functional_form macro. This macro allows you to assign symbolic functions to each node in a hypergraph along with the values of any parameters. This hypergraph with functional form information can be transformed into a system of ODEs which can be solved using Julia's ecosystem of DE solvers.","category":"page"},{"location":"dynamics/dynamical_hypergraphs/","page":"Dynamical Hypergraphs","title":"Dynamical Hypergraphs","text":"@functional_form","category":"page"},{"location":"dynamics/dynamical_hypergraphs/#EcologicalHypergraphs.@functional_form","page":"Dynamical Hypergraphs","title":"EcologicalHypergraphs.@functional_form","text":"@functional_form node begin\n\n    x -> a*e*x # Forwards function\n    x -> a*x   # Backwards function\nend a e\n\nThe @functional_form macro takes care of creating a symbolic function and adding it to a Node or Vector{Node}. It replaces the placeholder variable x with the variable representing the supplied node and disambiguates the parameters being declared from  similarily named parameters on different interactions.\n\nIf two functions are supplied as in the above example, the first function is the \"forwards function\" and represents the amount of biomass addition to the subject of the interaction. the second function is the \"backwards function\" which represents the amount of biomass being removed from the object of the interaction. The difference between these two functions is the loss from the system.\n\nWhen this asymmetry is not required, you only need to define one function. In this case both the forwards and backwards function of the node are identical. This is the case for loops, such as growth, where deaths and growth can be collected into the same  expression (net growth). \n\n@functional_form node begin\n\n    x -> x*r*(1 - x/k)\nend r k\n\n\n\n\n\n","category":"macro"},{"location":"dynamics/dynamical_hypergraphs/#Systems-of-Differential-Equations","page":"Dynamical Hypergraphs","title":"Systems of Differential Equations","text":"","category":"section"},{"location":"dynamics/dynamical_hypergraphs/","page":"Dynamical Hypergraphs","title":"Dynamical Hypergraphs","text":"These functions are used for converting EcologicalHypergraph objects annotated with functions to systems of differential equations for use in either DifferentialEquations.jl or Symbolics.jl","category":"page"},{"location":"dynamics/dynamical_hypergraphs/","page":"Dynamical Hypergraphs","title":"Dynamical Hypergraphs","text":"ODESystem","category":"page"},{"location":"dynamics/dynamical_hypergraphs/#ModelingToolkit.ODESystem","page":"Dynamical Hypergraphs","title":"ModelingToolkit.ODESystem","text":"ODESystem(hg::EcologicalHypergraph)\n\nConstructor for an ODESystem from ModelingToolkit.jl which takes an EcologicalHypergraph. This can be passed to DifferentialEquations.jl for numerical solving.\n\n\n\n\n\n","category":"type"},{"location":"statistics/statistical_hypergraphs/#Statistical-Hypergraphs","page":"Statistical Hypergraphs","title":"Statistical Hypergraphs","text":"","category":"section"},{"location":"statistics/statistical_hypergraphs/","page":"Statistical Hypergraphs","title":"Statistical Hypergraphs","text":"Statistical stuff to come!","category":"page"},{"location":"interface/core/#Core-Functions","page":"Core Functions","title":"Core Functions","text":"","category":"section"},{"location":"interface/core/#Accessing-Species","page":"Core Functions","title":"Accessing Species","text":"","category":"section"},{"location":"interface/core/","page":"Core Functions","title":"Core Functions","text":"species","category":"page"},{"location":"interface/core/#EcologicalNetworks.species","page":"Core Functions","title":"EcologicalNetworks.species","text":"species(hg::EcologicalHypergraph)::Vector{String}\n\nReturns a vector of all the species represented in an EcologicalHypergraph.\n\n\n\n\n\nspecies(hg::EcologicalHypergraph)::Vector{String}\n\nReturns a vector of all the species represented in an edge.\n\n\n\n\n\nspecies(n::Node)\n\nReturns the species represented by a node.\n\n\n\n\n\n","category":"function"},{"location":"interface/core/#Accessing-Interactions","page":"Core Functions","title":"Accessing Interactions","text":"","category":"section"},{"location":"interface/core/","page":"Core Functions","title":"Core Functions","text":"interactions\nsubject\nobject\nrole","category":"page"},{"location":"interface/core/#EcologicalNetworks.interactions","page":"Core Functions","title":"EcologicalNetworks.interactions","text":"interactions(hg::EcologicalHypergraph)::Vector{Edge}\n\nReturns a vector of all the edges represented in an EcologicalHypergraph\n\n\n\n\n\n","category":"function"},{"location":"interface/core/#EcologicalHypergraphs.subject","page":"Core Functions","title":"EcologicalHypergraphs.subject","text":"subject(e::Edge)::Node \n\nReturns the Node playing the role of :subject in an Edge\n\n\n\n\n\n","category":"function"},{"location":"interface/core/#EcologicalHypergraphs.object","page":"Core Functions","title":"EcologicalHypergraphs.object","text":"object(e::Edge)::Node \n\nReturns the Node playing the role of :object in an Edge\n\n\n\n\n\n","category":"function"},{"location":"interface/core/#EcologicalHypergraphs.role","page":"Core Functions","title":"EcologicalHypergraphs.role","text":"role(n::Node)::Symbol\n\nReturns the role played by a node in it's edge.\n\n\n\n\n\n","category":"function"},{"location":"interface/core/#Accessing-Nodes","page":"Core Functions","title":"Accessing Nodes","text":"","category":"section"},{"location":"interface/core/","page":"Core Functions","title":"Core Functions","text":"nodes\nmodifiers\nadd_modifier!","category":"page"},{"location":"interface/core/#EcologicalHypergraphs.nodes","page":"Core Functions","title":"EcologicalHypergraphs.nodes","text":"nodes(e::Edge)\n\nReturns a vector of the Nodes in an Edge.\n\n\n\n\n\n","category":"function"},{"location":"interface/core/#EcologicalHypergraphs.modifiers","page":"Core Functions","title":"EcologicalHypergraphs.modifiers","text":"modifiers(e::Edge)::Vector{Node}\n\nReturns a vector of all the modifier nodes in an edge.\n\n\n\n\n\n","category":"function"},{"location":"interface/core/#EcologicalHypergraphs.add_modifier!","page":"Core Functions","title":"EcologicalHypergraphs.add_modifier!","text":"add_modifier!(e::Edge, n::Node, role::Symbol = :modifier)::Node\n\nAdd a modifier to e representing species spp. The optional role argument defaults to :modifier. Once finished, this function also returns a reference to the node that was added.\n\n\n\n\n\n","category":"function"},{"location":"interface/core/#Predicates","page":"Core Functions","title":"Predicates","text":"","category":"section"},{"location":"interface/core/","page":"Core Functions","title":"Core Functions","text":"isloop \ncontains_species\nisproducer\nisconsumer\nsubject_is_consumer\nsubject_is_producer","category":"page"},{"location":"interface/core/#EcologicalHypergraphs.isloop","page":"Core Functions","title":"EcologicalHypergraphs.isloop","text":"isloop(e::Edge)::Bool\n\nReturns true if the edge e is a loop (subject and object species are identical). Returns false otherwise.\n\n\n\n\n\n","category":"function"},{"location":"interface/core/#EcologicalHypergraphs.contains_species","page":"Core Functions","title":"EcologicalHypergraphs.contains_species","text":"contains_species(e::Edge, spp::Vector{String}, r::Vector{Symbol})::Bool\n\nReturns true if e contains a species in spp which plays a role in r, otherwise false.\n\n\n\n\n\ncontains_species(e::Edge, sp::String, r::Symbol)::Bool\n\nReturns true if e contains species sp playig role r, otherwise false.\n\n\n\n\n\n","category":"function"},{"location":"interface/core/#EcologicalHypergraphs.isproducer","page":"Core Functions","title":"EcologicalHypergraphs.isproducer","text":"isproducer(node::Node, trophic_levels::Dict{String, Float64})::Bool\n\nReturns true if the node node is a producer (trophic level == 1).\n\n\n\n\n\n","category":"function"},{"location":"interface/core/#EcologicalHypergraphs.isconsumer","page":"Core Functions","title":"EcologicalHypergraphs.isconsumer","text":"isconsumer(node::Node, trophic_levels::Dict{String, Float64})::Bool\n\nReturns true if the node node is a consumer (trophic level > 1.0).\n\n\n\n\n\n","category":"function"},{"location":"interface/core/#EcologicalHypergraphs.subject_is_consumer","page":"Core Functions","title":"EcologicalHypergraphs.subject_is_consumer","text":"subject_is_consumer(edge::Edge, trophic_levels::Dict{String, Float64})::Bool\n\nReturns true if the subject of the edge edge is a consumer.\n\n\n\n\n\n","category":"function"},{"location":"interface/core/#EcologicalHypergraphs.subject_is_producer","page":"Core Functions","title":"EcologicalHypergraphs.subject_is_producer","text":"subject_is_producer(edge::Edge, trophic_levels::Dict{String, Float64})::Bool\n\nReturns true if the subject of the edge edge is a producer.\n\n\n\n\n\n","category":"function"},{"location":"#EcologicalHypergraphs","page":"Index","title":"EcologicalHypergraphs","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"EcologicalHypergraphs.jl allows you to do ecology using hypergraphs. Currently, it  supports using hypergraphs do create large dynamical foodweb models which can incorporate non-trophic effects. In the future, it will support statistical study of these hypergraphs as well. It may also support embedding these hypergraphs in spatial networks in the future to facilitate metacommunity models.","category":"page"},{"location":"interface/types/#Types","page":"Types","title":"Types","text":"","category":"section"},{"location":"interface/types/","page":"Types","title":"Types","text":"EcologicalHypergraph\nNode\nEdge","category":"page"},{"location":"interface/types/#EcologicalHypergraphs.EcologicalHypergraph","page":"Types","title":"EcologicalHypergraphs.EcologicalHypergraph","text":"Type represeting an EcologicalHypergraph hypergraph.\n\nImplements an Annotated Hypergraph as described in Chodrow and Mellow (2020)\n\n\n\n\n\n","category":"type"},{"location":"interface/types/#EcologicalHypergraphs.Node","page":"Types","title":"EcologicalHypergraphs.Node","text":"Represents a node in the annotated hypergraph. Stores the species and the role it plays in it's edge.\n\n\n\n\n\n","category":"type"},{"location":"interface/types/#EcologicalHypergraphs.Edge","page":"Types","title":"EcologicalHypergraphs.Edge","text":"Represents a hyperedge in EcologicalHypergraph.\n\n\n\n\n\n","category":"type"}]
}
